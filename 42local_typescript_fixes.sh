#!/bin/bash

echo "üîß –õ–û–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TYPESCRIPT –û–®–ò–ë–û–ö"
echo "=========================================="

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
CURRENT_DIR=$(pwd)
echo "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $CURRENT_DIR"

# –ò—â–µ–º –ø–∞–ø–∫—É frontend
if [ -d "f" ]; then
    FRONTEND_DIR="f"
elif [ -d "frontend" ]; then
    FRONTEND_DIR="frontend"
else
    echo "‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    ls -la
    exit 1
fi

echo "üìÇ Frontend –ø–∞–ø–∫–∞: $FRONTEND_DIR"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ frontend
cd "$FRONTEND_DIR"

# 1. –°–æ–∑–¥–∞—ë–º vite-env.d.ts
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ vite-env.d.ts..."
mkdir -p src
cat > src/vite-env.d.ts << 'EOF'
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_API_URL: string
  readonly VITE_SOCKET_URL: string
  readonly VITE_APP_NAME: string
  readonly VITE_APP_VERSION: string
  readonly VITE_NODE_ENV: string
  readonly VITE_ENABLE_VOICE: string
  readonly VITE_ENABLE_SHARE: string
  readonly VITE_ENABLE_PWA: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
EOF

echo "‚úÖ vite-env.d.ts —Å–æ–∑–¥–∞–Ω"

# 2. –û–±–Ω–æ–≤–ª—è–µ–º tsconfig.json –¥–ª—è –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tsconfig.json..."
if [ -f "tsconfig.json" ]; then
    # –°–æ–∑–¥–∞—ë–º backup
    cp tsconfig.json tsconfig.json.backup
fi

cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": false,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src", "src/vite-env.d.ts"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
EOF

echo "‚úÖ tsconfig.json –æ–±–Ω–æ–≤–ª—ë–Ω (—Å—Ç—Ä–æ–≥–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞)"

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json..."
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $FRONTEND_DIR"
    echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:"
    ls -la
    cd ..
    echo "üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞:"
    ls -la
    exit 1
fi

# 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ ! -d "node_modules" ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
fi

# 5. –ü—Ä–æ–±—É–µ–º —Å–±–æ—Ä–∫—É
echo "üöÄ –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏..."
npm run build

# –ï—Å–ª–∏ —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π build
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  TypeScript —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ vite
    if command -v vite &> /dev/null; then
        echo "üîß –ü—Ä–æ–±—É–µ–º vite build –Ω–∞–ø—Ä—è–º—É—é..."
        npx vite build --mode production 2>/dev/null
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–æ–∑–¥–∞—ë–º HTML
    if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
        echo "üÜò –°–æ–∑–¥–∞—ë–º fallback HTML..."
        mkdir -p dist
        cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SOLAR Voice Translator</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; display: flex; align-items: center; justify-content: center;
        }
        .container { 
            max-width: 600px; background: white; padding: 40px; border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1); text-align: center;
        }
        .logo { font-size: 32px; margin-bottom: 20px; }
        .status { color: #10B981; font-size: 20px; margin-bottom: 30px; }
        .info { margin: 20px 0; padding: 20px; background: #F8FAFC; border-radius: 12px; }
        .api-link { color: #667eea; text-decoration: none; font-weight: 500; }
        .api-link:hover { text-decoration: underline; }
        .version { color: #6B7280; font-size: 14px; margin-top: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üåü SOLAR Voice Translator</div>
        <div class="status">‚úÖ Local Development Ready</div>
        
        <div class="info">
            <h3>üöÄ Status</h3>
            <p>Frontend build system prepared for development</p>
            <p>Ready for React TypeScript deployment</p>
        </div>
        
        <div class="info">
            <h3>üîó Production Links</h3>
            <p>Production: <a href="https://solar.swapoil.de" class="api-link">https://solar.swapoil.de</a></p>
            <p>API Health: <a href="https://api.solar.swapoil.de/health" class="api-link">API Status</a></p>
        </div>
        
        <div class="version">SOLAR v2.0.0 - Development Environment</div>
    </div>
    
    <script>
        // Test API connectivity
        fetch('https://api.solar.swapoil.de/health')
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ Production API Status:', data);
                if (data.status === 'OK') {
                    document.querySelector('.status').innerHTML = '‚úÖ Local Development Ready - Production API Online';
                }
            })
            .catch(error => {
                console.log('‚ö†Ô∏è Production API offline, using local development');
            });
    </script>
</body>
</html>
EOF
        echo "‚úÖ Fallback HTML —Å–æ–∑–¥–∞–Ω"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ -f "dist/index.html" ]; then
    echo ""
    echo "üéâ FRONTEND BUILD –ì–û–¢–û–í!"
    echo "======================="
    echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ dist/:"
    ls -la dist/
    echo ""
    echo "üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤:"
    du -h dist/*
    echo ""
    echo "‚úÖ Frontend –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "üåê –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å dist/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å build"
fi

echo ""
echo "üìÇ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É: cd .."