// f/src/pages/Translate.tsx - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Smart Input

import React, { useState } from 'react';
import { ArrowUpDown } from 'lucide-react';
import SmartTextInput from '../components/SmartTextInput';

const TranslatePage: React.FC = () => {
  const [inputText, setInputText] = useState("");
  const [outputText, setOutputText] = useState("");
  const [fromLanguage, setFromLanguage] = useState("English");
  const [toLanguage, setToLanguage] = useState("–†—É—Å—Å–∫–∏–π");
  const [isTranslating, setIsTranslating] = useState(false);
  const [activeTab, setActiveTab] = useState<'text' | 'voice'>('text');

  // üåç –Ø–∑—ã–∫–∏
  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'de', name: 'German', flag: 'üá©üá™' },
    { code: 'es', name: 'Spanish', flag: 'üá™üá∏' },
    { code: 'cs', name: 'Czech', flag: 'üá®üáø' },
    { code: 'pl', name: 'Polish', flag: 'üáµüá±' },
  ];

  // üîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏
  const swapLanguages = () => {
    const temp = fromLanguage;
    setFromLanguage(toLanguage);
    setToLanguage(temp);
    
    // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—Å—Ç—ã
    const tempText = inputText;
    setInputText(outputText);
    setOutputText(tempText);
  };

  // üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∫–∞ mock)
  const handleTranslate = async (text: string) => {
    setIsTranslating(true);
    setInputText(text); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
    
    try {
      // Mock –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const mockTranslations: Record<string, string> = {
        "How are you doing today?": "–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?",
        "I would like to book a table": "–Ø —Ö–æ—Ç–µ–ª –±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫",
        "Where is the nearest hospital?": "–ì–¥–µ –±–ª–∏–∂–∞–π—à–∞—è –±–æ–ª—å–Ω–∏—Ü–∞?",
        "Can you help me with directions?": "–ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –º–Ω–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏?",
        "Good morning, how can I help you?": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
        "Thank you very much": "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ",
        "Excuse me, do you speak English?": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏?",
        "Where is the bathroom?": "–ì–¥–µ —Ç—É–∞–ª–µ—Ç?",
        "Can you help me find a taxi?": "–ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –º–Ω–µ –Ω–∞–π—Ç–∏ —Ç–∞–∫—Å–∏?",
        "How are you feeling?": "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        "How are things going?": "–ö–∞–∫ –¥–µ–ª–∞ –∏–¥—É—Ç?"
      };
      
      const translation = mockTranslations[text] || `–ü–µ—Ä–µ–≤–æ–¥: ${text}`;
      setOutputText(translation);
      
    } catch (error) {
      console.error('Translation error:', error);
      setOutputText('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      setIsTranslating(false);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-4 md:p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2 flex items-center justify-center gap-3">
          üåç SOLAR Voice Translator
        </h1>
        <p className="text-gray-600 text-lg">
          Real-time AI translation with smart completion
        </p>
      </div>

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–æ–≤ */}
      <div className="flex items-center justify-center gap-4 mb-8">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-600">From</span>
          <select
            value={fromLanguage}
            onChange={(e) => setFromLanguage(e.target.value)}
            className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
          >
            {languages.map((lang) => (
              <option key={lang.code} value={lang.name}>
                {lang.flag} {lang.name}
              </option>
            ))}
          </select>
        </div>

        <button
          onClick={swapLanguages}
          className="p-2 text-gray-500 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-colors"
          title="Swap languages"
        >
          <ArrowUpDown className="w-5 h-5" />
        </button>

        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-600">To</span>
          <select
            value={toLanguage}
            onChange={(e) => setToLanguage(e.target.value)}
            className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
          >
            {languages.map((lang) => (
              <option key={lang.code} value={lang.name}>
                {lang.flag} {lang.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="flex justify-center mb-6">
        <div className="flex bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setActiveTab('text')}
            className={`flex items-center gap-2 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'text'
                ? 'bg-white text-blue-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            üìù Text Translation
          </button>
          <button
            onClick={() => setActiveTab('voice')}
            className={`flex items-center gap-2 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'voice'
                ? 'bg-white text-blue-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            üé§ Voice Translation
          </button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å AI –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Input ({fromLanguage}) {languages.find(l => l.name === fromLanguage)?.flag}
          </label>
          
          {activeTab === 'text' ? (
            <SmartTextInput
              value={inputText}
              onChange={setInputText}
              onTranslate={handleTranslate}
              placeholder={`Enter text in ${fromLanguage}... AI will help complete your sentence`}
              language={fromLanguage}
            />
          ) : (
            <div className="w-full min-h-[200px] p-4 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50 flex items-center justify-center">
              <div className="text-center">
                <div className="text-4xl mb-2">üé§</div>
                <div className="text-gray-600 font-medium">Voice Translation</div>
                <div className="text-sm text-gray-500 mt-1">Coming soon in v2.1.0</div>
              </div>
            </div>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Translation ({toLanguage}) {languages.find(l => l.name === toLanguage)?.flag}
          </label>
          <div className="w-full min-h-[200px] p-4 border border-gray-300 rounded-lg bg-gray-50 relative">
            {isTranslating ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
                  <span className="text-gray-600 font-medium">Translating with AI...</span>
                  <div className="text-sm text-gray-500 mt-1">Processing your text</div>
                </div>
              </div>
            ) : outputText ? (
              <div className="space-y-3">
                <div className="text-gray-800 leading-relaxed text-lg">{outputText}</div>
                <div className="flex items-center gap-2 pt-2 border-t border-gray-200">
                  <button className="text-sm text-blue-600 hover:text-blue-800 font-medium">
                    üîä Play Audio
                  </button>
                  <button 
                    onClick={() => navigator.clipboard?.writeText(outputText)}
                    className="text-sm text-gray-600 hover:text-gray-800 font-medium"
                  >
                    üìã Copy
                  </button>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="text-3xl mb-2">üåü</div>
                  <div className="text-gray-500 italic">Your translation will appear here...</div>
                  <div className="text-sm text-gray-400 mt-1">Start typing to see AI suggestions</div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –î–µ–º–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-semibold text-blue-900 mb-3 flex items-center gap-2">
          üß™ Try AI Smart Completion:
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-4">
          <div className="flex items-start space-x-2">
            <span className="text-blue-500">‚èé</span>
            <div>
              <div className="font-medium">Accept Suggestion</div>
              <div className="text-blue-700">Press Tab or click Accept</div>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-purple-500">‚ú®</span>
            <div>
              <div className="font-medium">Continue with AI</div>
              <div className="text-blue-700">Ctrl+Enter or click Continue</div>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-gray-500">‚éã</span>
            <div>
              <div className="font-medium">Dismiss</div>
              <div className="text-blue-700">Press Escape or click X</div>
            </div>
          </div>
        </div>
        
        {/* –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="space-y-2">
          <div className="font-medium text-blue-900">Quick test examples:</div>
          <div className="flex flex-wrap gap-2">
            {[
              "How are",
              "I would like", 
              "Where is",
              "Can you help",
              "Good morning",
              "Thank you"
            ].map((example, index) => (
              <button
                key={index}
                onClick={() => setInputText(example)}
                className="text-xs px-3 py-1 bg-white border border-blue-300 rounded-full hover:bg-blue-50 transition-colors"
              >
                "{example}"
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="mt-6 text-center text-sm text-gray-500">
        üöÄ SOLAR v2.0.0 ‚Ä¢ Smart AI Completion ‚Ä¢ Enterprise Ready
      </div>
    </div>
  );
};

export default TranslatePage;