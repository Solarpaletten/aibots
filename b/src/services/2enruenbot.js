// src/services/translatorRuEnBotService.js - –†—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const { transcribeAudio } = require('./whisperService');
const { translateText } = require('./translationService');
const { speakText } = require('./textToSpeechService');

// –°–æ–∑–¥–∞–µ–º tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tmpDir = path.join(__dirname, '../../tmp');
fs.mkdirSync(tmpDir, { recursive: true });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è RU-EN –±–æ—Ç–∞
const token = process.env.RU_EN_TRANSLATOR;
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
bot.on('polling_error', (error) => {
  console.log('Polling error:', error.message);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
const DIRECTION = 'ru-en';
const SOURCE_LANG = 'ru';
const TARGET_LANG = 'en';
const SOURCE_EMOJI = 'üá∑üá∫';
const TARGET_EMOJI = 'üá¨üáß';

// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const userTranslations = new Map(); // chatId -> { lastTranslation, originalText }

function getUserTranslations(chatId) {
  if (!userTranslations.has(chatId)) {
    userTranslations.set(chatId, { lastTranslation: null, originalText: null });
  }
  return userTranslations.get(chatId);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(() => {
  fs.readdir(tmpDir, (err, files) => {
    if (err) return;
    files.forEach(file => {
      const filePath = path.join(tmpDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) return;
        if (Date.now() - stats.mtimeMs > 10 * 60 * 1000) {
          fs.unlink(filePath, () => {});
        }
      });
    });
  });
}, 5 * 60 * 1000);

// /start –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId,
    `üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ ${SOURCE_EMOJI}‚Üí${TARGET_EMOJI}\n\n` +
    `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n` +
    `–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
  );
});

// /help –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, 
    `üìñ *–†—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫*\n\n` +
    `*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n` +
    `- –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n` +
    `- –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
    `- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîä, —á—Ç–æ–±—ã –ø—Ä–æ—Å–ª—É—à–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n` +
    `*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:*\n` +
    `${SOURCE_EMOJI} –†—É—Å—Å–∫–∏–π ‚Üí ${TARGET_EMOJI} –ê–Ω–≥–ª–∏–π—Å–∫–∏–π`,
    {
      parse_mode: 'Markdown'
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.voice.file_id;
  const userTranslation = getUserTranslations(chatId);

  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const fileName = await bot.downloadFile(fileId, tmpDir);
    console.log('–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª:', fileName);
    
    const transcript = await transcribeAudio(fileName, SOURCE_LANG);
    console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcript);
    
    const translated = await translateText(transcript, TARGET_LANG, SOURCE_LANG);
    console.log('–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', translated);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    userTranslation.lastTranslation = translated;
    userTranslation.originalText = transcript;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
    await bot.sendMessage(chatId,
      `${SOURCE_EMOJI} "${transcript}"\n\n${TARGET_EMOJI} "${translated}"`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üîä RU", callback_data: "speak_original" },
              { text: "üîä EN", callback_data: "speak_translation" }
            ]
          ]
        }
      }
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:', e);
    bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (msg) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text.startsWith('/')) return;

  const chatId = msg.chat.id;
  const userTranslation = getUserTranslations(chatId);

  try {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    const translated = await translateText(msg.text, TARGET_LANG, SOURCE_LANG);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    userTranslation.lastTranslation = translated;
    userTranslation.originalText = msg.text;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.sendMessage(chatId,
      `${SOURCE_EMOJI} "${msg.text}"\n\n${TARGET_EMOJI} "${translated}"`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üîä RU", callback_data: "speak_original" },
              { text: "üîä EN", callback_data: "speak_translation" }
            ]
          ]
        }
      }
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞:', e);
    bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const userTranslation = getUserTranslations(chatId);
  
  console.log('–ü–æ–ª—É—á–µ–Ω callback_query:', query.data);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (—Ä—É—Å—Å–∫–∏–π)
  if (query.data === "speak_original") {
    const text = userTranslation.originalText;
    if (!text) {
      try {
        await bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏' });
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e.message);
      }
      return;
    }

    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
      try {
        await bot.answerCallbackQuery(query.id);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e.message);
      }
      
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è
      const audioPath = await speakText(text, SOURCE_LANG);
      
      await bot.sendAudio(chatId, audioPath, {
        caption: `üîä –†—É—Å—Å–∫–∏–π: "${text}"`,
        reply_to_message_id: messageId
      });
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:', e);
      try {
        await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏' });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', err.message);
      }
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
  if (query.data === "speak_translation") {
    const text = userTranslation.lastTranslation;
    if (!text) {
      try {
        await bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏' });
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e.message);
      }
      return;
    }

    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
      try {
        await bot.answerCallbackQuery(query.id);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e.message);
      }
      
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è
      const audioPath = await speakText(text, TARGET_LANG);
      
      await bot.sendAudio(chatId, audioPath, {
        caption: `üîä English: "${text}"`,
        reply_to_message_id: messageId
      });
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:', e);
      try {
        await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏' });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', err.message);
      }
    }
    return;
  }
});

console.log('[BOT] –†—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–ø—É—â–µ–Ω (RU‚ÜíEN)');
