// src/services/derudebot.js - –†—É—Å—Å–∫–∏–π-–Ω–µ–º–µ—Ü–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const { transcribeAudio } = require('../../../f/whisperService');
const { translateText } = require('./translationService');
const { speakText } = require('../../../f/textToSpeechService');

// –°–æ–∑–¥–∞–µ–º tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tmpDir = path.join(__dirname, '../../tmp');
fs.mkdirSync(tmpDir, { recursive: true });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è ru-de –±–æ—Ç–∞
const token = process.env.RU_DE_TRANSLATOR;
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
bot.on('polling_error', (error) => {
  console.log('Polling error:', error.message);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ-—Ä—É—Å—Å–∫–æ–≥–æ
const DIRECTION = 'ru-de';
const SOURCE_LANG = 'ru';
const TARGET_LANG = 'de';

// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const userTranslations = new Map(); // chatId -> { lastTranslation, originalText }

function getUserTranslations(chatId) {
  if (!userTranslations.has(chatId)) {
    userTranslations.set(chatId, { lastTranslation: null, originalText: null });
  }
  return userTranslations.get(chatId);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(() => {
  fs.readdir(tmpDir, (err, files) => {
    if (err) return;
    files.forEach(file => {
      const filePath = path.join(tmpDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) return;
        if (Date.now() - stats.mtimeMs > 10 * 60 * 1000) {
          fs.unlink(filePath, () => {});
        }
      });
    });
  });
}, 5 * 60 * 1000);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `üá©üá™‚û°Ô∏èüá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–º–µ—Ü–∫–æ-—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –¢–µ–∫—Å—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏`;
  
  bot.sendMessage(chatId, welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `ÔøΩÔøΩüá™‚û°Ô∏èüá∑üá∫ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ

üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ

‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîÑ **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:** –ù–µ–º–µ—Ü–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π`;
  
  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) return;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text || text.trim() === '') return;
  
  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${text}`);
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    const translatedText = await translateText(text, SOURCE_LANG, TARGET_LANG);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const userTrans = getUserTranslations(chatId);
    userTrans.lastTranslation = translatedText;
    userTrans.originalText = text;
    
    console.log(`–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${translatedText}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const response = `üá©üá™‚û°Ô∏èüá∑üá∫\n\n**–û—Ä–∏–≥–∏–Ω–∞–ª:** ${text}\n**–ü–µ—Ä–µ–≤–æ–¥:** ${translatedText}`;
    await bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    try {
      const audioPath = await speakText(translatedText, TARGET_LANG);
      if (audioPath && fs.existsSync(audioPath)) {
        await bot.sendVoice(chatId, audioPath);
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          fs.unlink(audioPath, () => {});
        }, 5000);
      }
    } catch (voiceError) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞:', voiceError.message);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error.message);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const voice = msg.voice;
  
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await bot.sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const fileId = voice.file_id;
    const fileInfo = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const fileName = `voice_${Date.now()}.oga`;
    const filePath = path.join(tmpDir, fileName);
    
    const response = await fetch(fileUrl);
    const buffer = await response.buffer();
    fs.writeFileSync(filePath, buffer);
    
    console.log(`–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
    
    // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
    const transcribedText = await transcribeAudio(filePath);
    console.log(`–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${transcribedText}`);
    
    if (!transcribedText || transcribedText.trim() === '') {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    const translatedText = await translateText(transcribedText, SOURCE_LANG, TARGET_LANG);
    console.log(`–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${translatedText}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const userTrans = getUserTranslations(chatId);
    userTrans.lastTranslation = translatedText;
    userTrans.originalText = transcribedText;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const responseMessage = `üé§üá©üá™‚û°Ô∏èüá∑üá∫\n\n**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** ${transcribedText}\n**–ü–µ—Ä–µ–≤–æ–¥:** ${translatedText}`;
    await bot.sendMessage(chatId, responseMessage, { parse_mode: 'Markdown' });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    try {
      const audioPath = await speakText(translatedText, TARGET_LANG);
      if (audioPath && fs.existsSync(audioPath)) {
        await bot.sendVoice(chatId, audioPath);
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          fs.unlink(audioPath, () => {});
        }, 5000);
      }
    } catch (voiceError) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞:', voiceError.message);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlink(filePath, () => {});
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞:', error.message);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

console.log('[BOT] –†—É—Å—Å–∫–æ-–Ω–µ–º–µ—Ü–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–ø—É—â–µ–Ω');
