const fs = require('fs');
const path = require('path');

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è TTS - –≤ production –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
class TextToSpeechService {
  constructor() {
    this.supportedLanguages = {
      'en': 'English',
      'ru': 'Russian', 
      'de': 'German',
      'es': 'Spanish',
      'cs': 'Czech',
      'pl': 'Polish',
      'lt': 'Lithuanian',
      'lv': 'Latvian',
      'no': 'Norwegian'
    };
    console.log('üîä Text-to-Speech Service initialized (mock mode)');
  }

  async generateSpeech(text, language = 'en', voice = 'default') {
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      const tempDir = path.join(__dirname, '../../tmp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const filename = `tts_${Date.now()}_${language}.mp3`;
      const filepath = path.join(tempDir, filename);

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ TTS API
      // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      const mockAudioData = Buffer.alloc(1024); // 1KB –∑–∞–≥–ª—É—à–∫–∞
      fs.writeFileSync(filepath, mockAudioData);

      console.log(`üîä Generated speech for "${text.substring(0, 50)}..." in ${language}`);

      return {
        audioPath: filepath,
        language,
        text,
        duration: Math.ceil(text.length * 0.1), // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        provider: 'mock-tts'
      };

    } catch (error) {
      console.error('TTS Error:', error);
      throw new Error(`Text-to-Speech failed: ${error.message}`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏
  async speakText(text, language = 'en') {
    const result = await this.generateSpeech(text, language);
    return result.audioPath;
  }

  getSupportedLanguages() {
    return this.supportedLanguages;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const ttsService = new TextToSpeechService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function speakText(text, language = 'en') {
  return await ttsService.speakText(text, language);
}

module.exports = {
  speakText,
  TextToSpeechService,
  ttsService
};
