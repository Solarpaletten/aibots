// src/services/translatorLithuanianBotService.js
const logger = require('./utils/logger');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const { transcribeAudio } = require('./whisperService');
const { translateText, detectLanguage } = require('./translationService');
const { speakText } = require('./textToSpeechService');
const audioSplitter = require('./utils/audioSplitter');

const tmpDir = path.join(__dirname, '../../tmp');
fs.mkdirSync(tmpDir, { recursive: true });

const token = process.env.LT_RU_TRANSLATOR;
if (!token) {
  console.error('TELEGRAM_LT_BOT token not found in environment variables!');
  logger.error('Bot token not found', {
    error: 'TELEGRAM_LT_BOT environment variable is missing',
    path: path.resolve(__dirname, '.env')
  });
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

const userSettings = new Map();

function getUserSettings(chatId) {
  if (!userSettings.has(chatId)) {
    userSettings.set(chatId, { 
      direction: 'auto',
      lastTranslation: null,
      lastSource: null 
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    logger.userActivity({
      userId: chatId,
      command: 'new_user',
      messageType: 'system'
    });
  }
  return userSettings.get(chatId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞
function getLanguageFlag(langCode) {
  return langCode === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';
}

async function getTranslationDirection(text, userDirection = 'auto') {
  console.log('üîç getTranslationDirection –≤—ã–∑–≤–∞–Ω–∞ —Å:', { text: text.substring(0, 50), userDirection });
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (userDirection !== 'auto') {
    const result = userDirection === 'lt-ru' 
      ? { source: 'lt', target: 'ru' }
      : { source: 'ru', target: 'lt' };
    console.log('üìå –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;
  }

  try {
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    
    // 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ç–æ–≤—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
    const hasLithuanianChars = /[ƒÖƒçƒôƒóƒØ≈°≈≥≈´≈æƒÑƒåƒòƒñƒÆ≈†≈≤≈™≈Ω]/i.test(text);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è —ë –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
    const hasCyrillicChars = /[–∞-—è—ë–ê-–Ø–Å]/i.test(text);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
    const hasBasicLatin = /[a-zA-Z]/.test(text);
    
    console.log('üî§ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤:', {
      hasLithuanianChars,
      hasCyrillicChars,
      hasBasicLatin,
      textLength: text.length,
      firstChars: text.substring(0, 10)
    });
    
    let result;
    
    // –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê:
    
    // 1. –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—Ç–æ–≤—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ù–ï–¢ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ª–∏—Ç–æ–≤—Å–∫–∏–π
    if (hasLithuanianChars && !hasCyrillicChars) {
      result = { source: 'lt', target: 'ru' };
      console.log('‚úÖ –õ–ò–¢–û–í–°–ö–ò–ô: –Ω–∞–π–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã');
    }
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Ä—É—Å—Å–∫–∏–π
    else if (hasCyrillicChars) {
      result = { source: 'ru', target: 'lt' };
      console.log('‚úÖ –†–£–°–°–ö–ò–ô: –Ω–∞–π–¥–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞');
    }
    // 3. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ - –ø—Ä–æ–±—É–µ–º API –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    else if (hasBasicLatin && typeof detectLanguage === 'function') {
      try {
        const detectedLang = await detectLanguage(text);
        console.log('ü§ñ API –æ–ø—Ä–µ–¥–µ–ª–∏–ª —è–∑—ã–∫ –∫–∞–∫:', detectedLang);
        
        if (detectedLang === 'lt' || detectedLang === 'lithuanian') {
          result = { source: 'lt', target: 'ru' };
          console.log('‚úÖ –õ–ò–¢–û–í–°–ö–ò–ô: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ API');
        } else if (detectedLang === 'ru' || detectedLang === 'russian') {
          result = { source: 'ru', target: 'lt' };
          console.log('‚úÖ –†–£–°–°–ö–ò–ô: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ API');
        } else {
          // API –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π —è–∑—ã–∫
          result = { source: 'ru', target: 'lt' };
          console.log('ü§∑ API –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª LT/RU, —Å—á–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
      } catch (apiError) {
        console.log('‚ö†Ô∏è API detectLanguage –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', apiError.message);
        // Fallback: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ - —Ä—É—Å—Å–∫–∏–π, –¥–ª–∏–Ω–Ω—ã–µ - –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏—Ç–æ–≤—Å–∫–∏–π
        result = text.length < 15 
          ? { source: 'ru', target: 'lt' }
          : { source: 'lt', target: 'ru' };
        console.log(`ü§∑ Fallback –ø–æ –¥–ª–∏–Ω–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤):`, result);
      }
    }
    // 4. –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã, –Ω–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (—Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏) - —Å—á–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–º
    else {
      result = { source: 'ru', target: 'lt' };
      console.log('ü§∑ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å—á–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–º');
    }
    
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getTranslationDirection:', error);
    
    logger.error('Language detection failed', {
      error: error.message,
      text: text.substring(0, 50),
      fallback: 'conservative_russian'
    });
    
    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π fallback - –≤—Å–µ–≥–¥–∞ —Ä—É—Å—Å–∫–∏–π ‚Üí –ª–∏—Ç–æ–≤—Å–∫–∏–π
    const result = { source: 'ru', target: 'lt' };
    console.log('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback:', result);
    return result;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (msg) => {
  if (msg.text.startsWith('/')) return;

  const chatId = msg.chat.id;
  const settings = getUserSettings(chatId);
  const startTime = Date.now();

  logger.userActivity({
    userId: chatId,
    command: 'text_message',
    messageType: 'text'
  });

  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const detectedLangs = await getTranslationDirection(msg.text, settings.direction);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
    if (settings.direction !== 'auto') {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
      const sourceEmoji = detectedLangs.source === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';
      const targetEmoji = detectedLangs.target === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';

      console.log('üîç –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º:', detectedLangs);
      const translated = await translateText(msg.text, detectedLangs.source, detectedLangs.target);

      settings.lastTranslation = translated;
      settings.lastSource = detectedLangs.target;

      await bot.sendMessage(chatId,
        `${sourceEmoji} "${msg.text}"\n${targetEmoji} "${translated}"`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üîä –û–∑–≤—É—á–∏—Ç—å", callback_data: `speak_${chatId}` }
              ]
            ]
          }
        }
      );
      return;
    }

    // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', detectedLangs);
    
    // –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const ltRuEmoji = getLanguageEmoji('lt', 'ru');
    const ruLtEmoji = getLanguageEmoji('ru', 'lt');
    
    await bot.sendMessage(chatId, 
      `üìù **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n` +
      `–¢–µ–∫—Å—Ç: "${msg.text}"`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { 
                text: `${ltRuEmoji.source}‚Üí${ltRuEmoji.target} –õ–∏—Ç–æ–≤—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π`, 
                callback_data: `translate_lt_ru:${Buffer.from(msg.text).toString('base64')}` 
              }
            ],
            [
              { 
                text: `${ruLtEmoji.source}‚Üí${ruLtEmoji.target} –†—É—Å—Å–∫–∏–π ‚Üí –õ–∏—Ç–æ–≤—Å–∫–∏–π`, 
                callback_data: `translate_ru_lt:${Buffer.from(msg.text).toString('base64')}` 
              }
            ],
            [
              { 
                text: "ü§ñ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                callback_data: `translate_auto:${Buffer.from(msg.text).toString('base64')}` 
              }
            ]
          ]
        }
      }
    );
    
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', e);
    
    logger.error('Text translation failed', {
      userId: chatId,
      error: e.message,
      stack: e.stack,
      input: msg.text.substring(0, 100)
    });
    
    await bot.sendMessage(chatId, 
      `‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n${e.message}`,
      { parse_mode: 'Markdown' }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.voice.file_id;
  const settings = getUserSettings(chatId);
  const startTime = Date.now();
  const duration = msg.voice.duration;

  logger.audioProcessing({
    userId: chatId,
    duration: duration,
    fileSize: msg.voice.file_size,
    stage: 'started'
  });

  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileName = await bot.downloadFile(fileId, tmpDir);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.sendMessage(chatId, 'üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    let transcript;
    try {
      transcript = await transcribeAudio(fileName, 'lt');
    } catch (error) {
      transcript = await transcribeAudio(fileName, 'ru');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    const detectedLangs = await getTranslationDirection(transcript, settings.direction);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
    const sourceEmoji = detectedLangs.source === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';
    const targetEmoji = detectedLangs.target === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    const translated = await translateText(transcript, detectedLangs.source, detectedLangs.target);

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    const audioPath = await speakText(translated, detectedLangs.target);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(chatId,
      `${sourceEmoji} "${transcript}"\n\n${targetEmoji} "${translated}"`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üîä –û–∑–≤—É—á–∏—Ç—å", callback_data: `speak_${chatId}` },
              { text: "üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data: `reverse_${chatId}` }
            ]
          ]
        }
      }
    );

    await bot.sendAudio(chatId, audioPath, {
      caption: `üîä –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${detectedLangs.target.toUpperCase()}`
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    settings.lastTranslation = translated;
    settings.lastSource = detectedLangs.target;
    
  } catch (e) {
    logger.error('Voice processing failed', {
      userId: chatId,
      error: e.message,
      stack: e.stack
    });
    
    bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const settings = getUserSettings(chatId);

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    if (query.data.startsWith('translate_')) {
      const [direction, encodedText] = query.data.split(':');
      const text = Buffer.from(encodedText, 'base64').toString('utf-8');

      let source, target;
      if (direction === 'translate_lt_ru') {
        source = 'lt'; target = 'ru';
      } else if (direction === 'translate_ru_lt') {
        source = 'ru'; target = 'lt';
      } else {
        // auto - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const detected = await getTranslationDirection(text, 'auto');
        source = detected.source;
        target = detected.target;
      }

      const translated = await translateText(text, source, target);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
      const sourceEmoji = source === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';
      const targetEmoji = target === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      settings.lastTranslation = translated;
      settings.lastSource = target;

      await bot.sendMessage(chatId,
        `${sourceEmoji} "${text}"\n${targetEmoji} "${translated}"`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üîä –û–∑–≤—É—á–∏—Ç—å", callback_data: `speak_${chatId}` },
                { text: "üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data: `reverse_${chatId}` }
              ]
            ]
          }
        }
      );
      
      bot.answerCallbackQuery(query.id);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    if (query.data.startsWith('speak_')) {
      const text = settings.lastTranslation;
      const lang = settings.lastSource;
      
      if (!text || !lang) {
        return bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è' });
      }
      
      const audioPath = await speakText(text, lang);
      await bot.sendAudio(chatId, audioPath, {
        caption: `üîä –û–∑–≤—É—á–∫–∞ –Ω–∞ ${lang.toUpperCase()}`
      });
      
      bot.answerCallbackQuery(query.id);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    if (query.data.startsWith('reverse_')) {
      const text = settings.lastTranslation;
      const source = settings.lastSource;

      if (!text || !source) {
        return bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞' });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
      const target = source === 'lt' ? 'ru' : 'lt';

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
      const sourceEmoji = source === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';
      const targetEmoji = target === 'lt' ? 'üá±üáπ' : 'üá∑üá∫';

      const reverseTranslated = await translateText(text, source, target);

      await bot.sendMessage(chatId,
        `üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:\n${sourceEmoji} "${text}"\n${targetEmoji} "${reverseTranslated}"`
      );
      
      bot.answerCallbackQuery(query.id);
    }
    
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', e);
    bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  logger.userActivity({
    userId: chatId,
    command: '/start',
    messageType: 'command'
  });

  bot.sendMessage(chatId,
    `üëã Sveiki! A≈° esu vertƒójas üá±üáπ‚áÑüá∑üá∫\n\n` +
    `–†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\n\n` +
    `–ö–æ–º–∞–Ω–¥—ã:\n` +
    `/mode_lt_ru - —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –õ–¢‚Üí–†–£\n` +
    `/mode_ru_lt - —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –†–£‚Üí–õ–¢\n` +
    `/mode_auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n` +
    `/status - —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n\n` +
    `–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä–µ–∂–∏–º–∞
bot.onText(/\/mode_lt_ru/, (msg) => {
  const settings = getUserSettings(msg.chat.id);
  settings.direction = 'lt-ru';
  
  logger.userActivity({
    userId: msg.chat.id,
    command: '/mode_lt_ru',
    messageType: 'command'
  });
  
  bot.sendMessage(msg.chat.id, `üîÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: üá±üáπ ‚Üí üá∑üá∫`);
});

bot.onText(/\/mode_ru_lt/, (msg) => {
  const settings = getUserSettings(msg.chat.id);
  settings.direction = 'ru-lt';
  
  logger.userActivity({
    userId: msg.chat.id,
    command: '/mode_ru_lt',
    messageType: 'command'
  });
  
  bot.sendMessage(msg.chat.id, `üîÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: üá∑üá∫ ‚Üí üá±üáπ`);
});

bot.onText(/\/mode_auto/, (msg) => {
  const settings = getUserSettings(msg.chat.id);
  settings.direction = 'auto';
  
  logger.userActivity({
    userId: msg.chat.id,
    command: '/mode_auto',
    messageType: 'command'
  });
  
  bot.sendMessage(msg.chat.id, `üîÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: üá±üáπ‚áÑüá∑üá∫`);
});

bot.onText(/\/status/, (msg) => {
  const settings = getUserSettings(msg.chat.id);
  let modeText = '';
  
  switch(settings.direction) {
    case 'lt-ru': modeText = 'üá±üáπ ‚Üí üá∑üá∫'; break;
    case 'ru-lt': modeText = 'üá∑üá∫ ‚Üí üá±üáπ'; break;
    case 'auto': modeText = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π üá±üáπ‚áÑüá∑üá∫'; break;
  }
  
  logger.userActivity({
    userId: msg.chat.id,
    command: '/status',
    messageType: 'command'
  });
  
  bot.sendMessage(msg.chat.id, `–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞: ${modeText}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  logger.error('Bot polling error', {
    error: error.message,
    stack: error.stack
  });
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(() => {
  fs.readdir(tmpDir, (err, files) => {
    if (err) return;
    files.forEach(file => {
      const filePath = path.join(tmpDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) return;
        if (Date.now() - stats.mtimeMs > 10 * 60 * 1000) {
          fs.unlink(filePath, () => {});
        }
      });
    });
  });
}, 5 * 60 * 1000);

logger.info('Lithuanian translator bot started', {
  timestamp: new Date().toISOString(),
  features: ['auto_detection', 'voice_processing', 'logging']
});

console.log('[BOT] Lithuanian translator launched with auto language detection, logging and audio functionality');